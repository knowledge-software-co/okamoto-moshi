services:
    laravel.test:
        build:
            context: './vendor/laravel/sail/runtimes/8.4'
            dockerfile: Dockerfile
            args:
                WWWGROUP: '${WWWGROUP}'
        image: 'sail-8.4/app'
        extra_hosts:
            - 'host.docker.internal:host-gateway'
        ports:
            - '${APP_PORT:-80}:80'
            - '${VITE_PORT:-5173}:${VITE_PORT:-5173}'
        environment:
            WWWUSER: '${WWWUSER}'
            LARAVEL_SAIL: 1
            XDEBUG_MODE: '${SAIL_XDEBUG_MODE:-off}'
            XDEBUG_CONFIG: '${SAIL_XDEBUG_CONFIG:-client_host=host.docker.internal}'
            IGNITION_LOCAL_SITES_PATH: '${PWD}'
        volumes:
            - '.:/var/www/html'
        networks:
            - sail
        depends_on:
            - mysql
            - mysql.test
            - redis
            - meilisearch
            - minio
            - mailpit
            - selenium
    container_worker:
        build:
            context: './vendor/laravel/sail/runtimes/8.4'
            dockerfile: Dockerfile
            args:
                WWWGROUP: '${WWWGROUP}'
        image: 'sail-8.4/app'
        environment:
            WWWUSER: '${WWWUSER}'
            LARAVEL_SAIL: 1
            XDEBUG_MODE: '${SAIL_XDEBUG_MODE:-off}'
            XDEBUG_CONFIG: '${SAIL_XDEBUG_CONFIG:-client_host=host.docker.internal}'
            IGNITION_LOCAL_SITES_PATH: '${PWD}'
        volumes:
            - '.:/var/www/html'
        command: 'php artisan queue:listen --timeout=1000'
        networks:
            - sail
        restart: always
    mysql:
        image: 'mysql/mysql-server:8.0'
        ports:
            - '${FORWARD_DB_PORT:-3306}:3306'
        environment:
            MYSQL_ROOT_PASSWORD: '${DB_PASSWORD}'
            MYSQL_ROOT_HOST: '%'
            MYSQL_DATABASE: '${DB_DATABASE}'
            MYSQL_USER: '${DB_USERNAME}'
            MYSQL_PASSWORD: '${DB_PASSWORD}'
            MYSQL_ALLOW_EMPTY_PASSWORD: 1
        volumes:
            - 'sail-mysql:/var/lib/mysql'
            - './vendor/laravel/sail/database/mysql/create-testing-database.sh:/docker-entrypoint-initdb.d/10-create-testing-database.sh'
        networks:
            - sail
        healthcheck:
            test:
                - CMD
                - mysqladmin
                - ping
                - '-p${DB_PASSWORD}'
            retries: 3
            timeout: 5s
    mysql.test:
        image: 'mysql/mysql-server:8.0'
        # enrokを使う場合は外部から利用できないためコメントアウト
        # ports:
        #     - 3300:3306
        environment:
            MYSQL_ROOT_PASSWORD: '${DB_PASSWORD}'
            MYSQL_ROOT_HOST: '%'
            MYSQL_DATABASE: '${DB_DATABASE}'
            MYSQL_USER: '${DB_USERNAME}'
            MYSQL_PASSWORD: '${DB_PASSWORD}'
            MYSQL_ALLOW_EMPTY_PASSWORD: 1
        networks:
            - sail
    redis:
        image: 'redis:alpine'
        ports:
            - '${FORWARD_REDIS_PORT:-6379}:6379'
        volumes:
            - 'sail-redis:/data'
        networks:
            - sail
        healthcheck:
            test:
                - CMD
                - redis-cli
                - ping
            retries: 3
            timeout: 5s
    meilisearch:
        image: 'getmeili/meilisearch:latest'
        ports:
            - '${FORWARD_MEILISEARCH_PORT:-7700}:7700'
        environment:
            MEILI_NO_ANALYTICS: '${MEILISEARCH_NO_ANALYTICS:-false}'
        volumes:
            - 'sail-meilisearch:/meili_data'
        networks:
            - sail
        healthcheck:
            test:
                - CMD
                - wget
                - '--no-verbose'
                - '--spider'
                - 'http://127.0.0.1:7700/health'
            retries: 3
            timeout: 5s
    minio:
        image: 'minio/minio:latest'
        ports:
            - '${FORWARD_MINIO_PORT:-9000}:9000'
            - '${FORWARD_MINIO_CONSOLE_PORT:-8900}:8900'
        environment:
            - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}
            - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}
            - MINIO_REGION=${AWS_DEFAULT_REGION}
        volumes:
            #- 'sail-minio:/data'
            # 'sail-minio:/data'だとci.ymlでのテストが通らないため./docker/minioに変更
            - ./docker/minio:/data
        networks:
            - sail
        command: 'minio server /data --console-address ":8900"'
        healthcheck:
            test:
                - CMD
                - mc
                - ready
                - local
            retries: 3
            timeout: 5s
    mc: # minio client (create buckets)
        image: minio/mc:RELEASE.2024-07-11T18-01-28Z
        working_dir: /root
        entrypoint: >
            sh -c "
                until (mc alias set myminio http://minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY}) do echo '...waiting...' && sleep 1; done;
                mc mb --ignore-existing myminio/${AWS_BUCKET};
                mc anonymous set public myminio/${AWS_BUCKET};
            "
        depends_on:
            - minio
        networks:
            - sail
    mailpit:
        image: 'axllent/mailpit:latest'
        ports:
            - '${FORWARD_MAILPIT_PORT:-1025}:1025'
            - '${FORWARD_MAILPIT_DASHBOARD_PORT:-8025}:8025'
        networks:
            - sail
    selenium:
        image: selenium/standalone-chromium
        extra_hosts:
            - 'host.docker.internal:host-gateway'
        volumes:
            - '/dev/shm:/dev/shm'
        networks:
            - sail
    ngrok:
        build:
            context: ./docker/ngrok
            dockerfile: Dockerfile
        image: 'ngrok/ngrok:alpine'
        platform: '${APP_PLATFORM}'
        environment:
            NGROK_AUTHTOKEN: '${NGROK_AUTHTOKEN}'
        # ngrokのドメインを固定する
        command: 'http laravel.test:80 --domain ${NGROK_DOMAIN}'
        ports:
            - '4040:4040'
        networks:
            - sail
        depends_on:
            - laravel.test
    # # 一度だけ自己証明書を作成する
    # certs:
    #     image: alpine:latest
    #     platform: '${APP_PLATFORM:-linux/amd64}'
    #     environment:
    #         DOMAIN: '${NGROK_DOMAIN}'
    #     volumes:
    #         - ./certs:/app
    #     restart: "no"
    #     command: >
    #         sh -c "apk add --no-cache openssl &&
    #         if [ ! -f /app/domain.key ] || [ ! -f /app/signed.crt ]; then
    #           openssl req -x509 -newkey rsa:4096 -sha256 -days 365 -nodes
    #           -keyout /app/domain.key
    #           -out /app/signed.crt
    #           -subj \"/CN=localhost\"
    #           -addext \"subjectAltName=DNS:localhost\"
    #           -addext \"extendedKeyUsage=serverAuth\" &&
    #           chmod 644 /app/domain.key /app/signed.crt &&
    #           echo '証明書が生成されました';
    #         else
    #           echo 'ファイルが既に存在します';
    #         fi"
    swagger-editor:
        image: swaggerapi/swagger-editor
        platform: '${APP_PLATFORM}'
        container_name: 'swagger-editor'
        ports:
            - '8001:8080'
    swagger-ui:
        image: swaggerapi/swagger-ui
        platform: '${APP_PLATFORM}'
        container_name: 'swagger-ui'
        ports:
            - '8002:8080'
        volumes:
            - ./docs/openapi.yaml:/openapi.yaml
        environment:
            SWAGGER_JSON: /openapi.yaml
            # API_URL: ""
    swagger-api:
        image: danielgtaylor/apisprout
        platform: '${APP_PLATFORM}'
        container_name: 'swagger-api'
        ports:
            - '8003:8000'
        volumes:
            - ./docs/openapi.yaml:/openapi.yaml
        command: /openapi.yaml
    schemaspy:
        build: ./docker/schemaspy
        image: schemaspy/schemaspy:6.2.3
        platform: '${APP_PLATFORM}'
        volumes:
            - ./.schemaspy:/output
        networks:
            - sail
        command: >
            java -jar /drivers_inc/jtds-1.3.1.jar
        environment:
            - TZ=Asia/Tokyo
            - schemaspy.t=${DB_CONNECTION:-mysql}
            - schemaspy.dp=/drivers_inc
            - schemaspy.host=${DB_HOST:-mysql}
            - schemaspy.port=${DB_PORT:-3306}
            - schemaspy.db=${DB_DATABASE:-laravel_local}
            - schemaspy.u=${DB_USERNAME:-phper}
            - schemaspy.p=${DB_PASSWORD:-secret}
            - schemaspy.s=${DB_DATABASE:-laravel_local}
        depends_on:
            - mysql
    nginx_schemaspy:
        image: nginx:1.19.5-alpine
        ports:
            - ${SCHEMASPY_WEB_PORT:-8080}:80
        networks:
            - sail
        volumes:
            - ./.schemaspy:/usr/share/nginx/html:ro
networks:
    sail:
        driver: bridge
volumes:
    sail-mysql:
        driver: local
    sail-redis:
        driver: local
    sail-meilisearch:
        driver: local
    sail-minio:
        driver: local
